name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Frontend tests
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run type check
        run: npm run type-check
      
      - name: Run tests
        run: npm test -- --coverage
      
      - name: Build
        run: npm run build
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # API Gateway tests
  gateway:
    name: API Gateway Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/gateway
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: devex
          POSTGRES_PASSWORD: devex
          POSTGRES_DB: devex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/gateway/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test -- --coverage
        env:
          TEST_DATABASE_URL: postgresql://devex:devex@localhost:5432/devex_test
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379
          JWT_SECRET: test-secret-key
      
      - name: Build
        run: npm run build
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/gateway/coverage/lcov.info
          flags: gateway
          name: gateway-coverage

  # AI Services tests
  ai-services:
    name: AI Services Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/ai-services
    
    services:
      postgres:
        image: ankane/pgvector
        env:
          POSTGRES_USER: devex
          POSTGRES_PASSWORD: devex
          POSTGRES_DB: devex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/ai-services/requirements.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run linter
        run: |
          flake8 src tests
          mypy src
      
      - name: Run tests
        run: pytest --cov=src --cov-report=xml --cov-report=term
        env:
          DATABASE_URL: postgresql://devex:devex@localhost:5432/devex_test
          REDIS_URL: redis://localhost:6379
          PYTHONPATH: .
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/ai-services/coverage.xml
          flags: ai-services
          name: ai-services-coverage

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, gateway, ai-services]
    
    services:
      postgres:
        image: ankane/pgvector
        env:
          POSTGRES_USER: devex
          POSTGRES_PASSWORD: devex
          POSTGRES_DB: devex
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Create test environment
        run: |
          cp .env.example .env
          sed -i 's/CHANGE-THIS/test-value/g' .env
      
      - name: Start services
        run: |
          docker-compose up -d
          sleep 10
      
      - name: Run integration tests
        run: |
          npm test --prefix backend/gateway -- --testMatch="**/api.integration.test.ts"
        env:
          DATABASE_URL: postgresql://devex:devex@localhost:5432/devex
          REDIS_URL: redis://localhost:6379
      
      - name: Stop services
        if: always()
        run: docker-compose down

  # Docker build test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [security]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.dev
          push: false
          tags: devex-frontend:test
      
      - name: Build Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./backend/gateway
          file: ./backend/gateway/Dockerfile.dev
          push: false
          tags: devex-gateway:test
      
      - name: Build AI Services
        uses: docker/build-push-action@v4
        with:
          context: ./backend/ai-services
          file: ./backend/ai-services/Dockerfile.dev
          push: false
          tags: devex-ai-services:test

  # Performance test
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true

# Deployment job (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [integration, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to staging
        run: echo "Deploy to staging environment"
        # Add actual deployment steps here